/**
 * NFD Management Service
 * Service for querying and managing NFDs
 *
 * OpenAPI spec version: 1.0
 * Contact: feedback@txnlab.dev
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("InfoApi", () => {
  let instance: api.InfoApi
  beforeEach(function() {
    instance = new api.InfoApi(config)
  });

  test("infoVersion", () => {
    return expect(instance.infoVersion({})).resolves.toBe(null)
  })
  test("infoinfoopenapi3Yaml", () => {
    return expect(instance.infoinfoopenapi3Yaml({})).resolves.toBe(null)
  })
})

describe("NfdApi", () => {
  let instance: api.NfdApi
  beforeEach(function() {
    instance = new api.NfdApi(config)
  });

  test("nfdActivity", () => {
    const name: Array<string> = undefined
    const type: string = "type_example"
    const afterTime: Date = 2013-10-20T19:20:30+01:00
    const limit: number = 789
    const sort: string = "sort_example"
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdActivity(name, type, afterTime, limit, sort, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdAnalytics", () => {
    const name: string = "name_example"
    const buyer: string = "buyer_example"
    const seller: string = "seller_example"
    const event: Array<string> = undefined
    const requireBuyer: boolean = true
    const includeOwner: boolean = true
    const excludeNFDAsSeller: boolean = true
    const category: Array<string> = undefined
    const saleType: Array<string> = undefined
    const length: Array<string> = undefined
    const traits: Array<string> = undefined
    const parentAppID: number = 789
    const minPrice: number = 789
    const maxPrice: number = 789
    const afterTime: Date = 2013-10-20T19:20:30+01:00
    const limit: number = 789
    const offset: number = 789
    const sort: string = "sort_example"
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdAnalytics(name, buyer, seller, event, requireBuyer, includeOwner, excludeNFDAsSeller, category, saleType, length, traits, parentAppID, minPrice, maxPrice, afterTime, limit, offset, sort, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdBadges", () => {
    const name: string = "name_example"
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdBadges(name, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdBrowse", () => {
    const name: string = "name_example"
    const category: Array<string> = undefined
    const saleType: Array<string> = undefined
    const state: Array<string> = undefined
    const parentAppID: number = 789
    const length: Array<string> = undefined
    const traits: Array<string> = undefined
    const owner: string = "owner_example"
    const reservedFor: string = "reservedFor_example"
    const prefix: string = "prefix_example"
    const substring: string = "substring_example"
    const vproperty: string = "vproperty_example"
    const vvalue: string = "vvalue_example"
    const minPrice: number = 789
    const maxPrice: number = 789
    const changedAfter: Date = 2013-10-20T19:20:30+01:00
    const limit: number = 789
    const offset: number = 789
    const sort: string = "sort_example"
    const view: string = "view_example"
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdBrowse(name, category, saleType, state, parentAppID, length, traits, owner, reservedFor, prefix, substring, vproperty, vvalue, minPrice, maxPrice, changedAfter, limit, offset, sort, view, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdConsensusLeaders", () => {
    const requireNFD: boolean = true
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdConsensusLeaders(requireNFD, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdConsensusMetrics", () => {
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdConsensusMetrics(ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdContractLock", () => {
    const body: api.ContractLockRequestBody = {
  "lock" : false,
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdContractLock(body, name, {})).resolves.toBe(null)
  })
  test("nfdContractUpgrade", () => {
    const body: api.RescindOfferRequestBody = {
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdContractUpgrade(body, name, {})).resolves.toBe(null)
  })
  test("nfdContractUpgradeV3", () => {
    const body: api.RescindOfferRequestBody = {
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdContractUpgradeV3(body, name, {})).resolves.toBe(null)
  })
  test("nfdDonationLeadersV2", () => {
    const name: string = "name_example"
    return expect(instance.nfdDonationLeadersV2(name, {})).resolves.toBe(null)
  })
  test("nfdDonationListV2", () => {
    return expect(instance.nfdDonationListV2({})).resolves.toBe(null)
  })
  test("nfdDonations", () => {
    const name: string = "name_example"
    return expect(instance.nfdDonations(name, {})).resolves.toBe(null)
  })
  test("nfdGetLookup", () => {
    const address: Array<string> = undefined
    const view: string = "view_example"
    const allowUnverified: boolean = true
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdGetLookup(address, view, allowUnverified, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdGetNFD", () => {
    const nameOrID: string = "nameOrID_example"
    const view: string = "view_example"
    const poll: boolean = true
    const nocache: boolean = true
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdGetNFD(nameOrID, view, poll, nocache, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdGetNFDsForAddressesV2", () => {
    const address: Array<string> = undefined
    const limit: number = 789
    const view: string = "view_example"
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdGetNFDsForAddressesV2(address, limit, view, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdGetNameSig", () => {
    const name: string = "name_example"
    return expect(instance.nfdGetNameSig(name, {})).resolves.toBe(null)
  })
  test("nfdGetQuote", () => {
    const buyer: string = "buyer_example"
    const name: string = "name_example"
    return expect(instance.nfdGetQuote(buyer, name, {})).resolves.toBe(null)
  })
  test("nfdGetRevAddressSig", () => {
    const address: string = "address_example"
    return expect(instance.nfdGetRevAddressSig(address, {})).resolves.toBe(null)
  })
  test("nfdIsValidASA", () => {
    const asaID: number = 789
    return expect(instance.nfdIsValidASA(asaID, {})).resolves.toBe(null)
  })
  test("nfdIsValidNFD", () => {
    const appID: number = 789
    return expect(instance.nfdIsValidNFD(appID, {})).resolves.toBe(null)
  })
  test("nfdLinkAddress", () => {
    const body: api.LinkAddressRequestBody = {
  "address" : [ "333333333333333333333333333333333333333333333333333333333A", "333333333333333333333333333333333333333333333333333333333A", "333333333333333333333333333333333333333333333333333333333A" ],
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdLinkAddress(body, name, {})).resolves.toBe(null)
  })
  test("nfdMint", () => {
    const body: api.MintRequestBody = {
  "algoOffer" : 2,
  "buyer" : "333333333333333333333333333333333333333333333333333333333A",
  "name" : "aa",
  "reservedFor" : "333333333333333333333333333333333333333333333333333333333A",
  "years" : 2
}
    return expect(instance.nfdMint(body, {})).resolves.toBe(null)
  })
  test("nfdOffer", () => {
    const body: api.OfferRequestBody = {
  "offer" : 1,
  "payReceiver" : false,
  "reservedFor" : "333333333333333333333333333333333333333333333333333333333A",
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdOffer(body, name, {})).resolves.toBe(null)
  })
  test("nfdPostOfferToOwner", () => {
    const body: api.PostOfferToOwnerRequestBody = {
  "note" : "aaa",
  "offer" : 1000001,
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdPostOfferToOwner(body, name, {})).resolves.toBe(null)
  })
  test("nfdPurchase", () => {
    const body: api.PurchaseRequestBody = {
  "buyer" : "333333333333333333333333333333333333333333333333333333333A",
  "offer" : 1
}
    const name: string = "name_example"
    return expect(instance.nfdPurchase(body, name, {})).resolves.toBe(null)
  })
  test("nfdRenew", () => {
    const body: api.RenewRequestBody = {
  "algoOffer" : 2,
  "buyer" : "333333333333333333333333333333333333333333333333333333333A",
  "name" : "aa",
  "years" : 2
}
    return expect(instance.nfdRenew(body, {})).resolves.toBe(null)
  })
  test("nfdRescindOffer", () => {
    const body: api.RescindOfferRequestBody = {
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdRescindOffer(body, name, {})).resolves.toBe(null)
  })
  test("nfdSearchV2", () => {
    const name: string = "name_example"
    const category: Array<string> = undefined
    const saleType: Array<string> = undefined
    const state: Array<string> = undefined
    const parentAppID: number = 789
    const length: Array<string> = undefined
    const traits: Array<string> = undefined
    const owner: string = "owner_example"
    const reservedFor: string = "reservedFor_example"
    const excludeUserReserved: boolean = true
    const prefix: string = "prefix_example"
    const substring: string = "substring_example"
    const vproperty: string = "vproperty_example"
    const vvalue: string = "vvalue_example"
    const segmentLocked: boolean = true
    const segmentRoot: boolean = true
    const minPrice: number = 789
    const maxPrice: number = 789
    const minPriceUsd: number = 789
    const maxPriceUsd: number = 789
    const changedAfter: Date = 2013-10-20T19:20:30+01:00
    const limit: number = 789
    const offset: number = 789
    const sort: string = "sort_example"
    const view: string = "view_example"
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdSearchV2(name, category, saleType, state, parentAppID, length, traits, owner, reservedFor, excludeUserReserved, prefix, substring, vproperty, vvalue, segmentLocked, segmentRoot, minPrice, maxPrice, minPriceUsd, maxPriceUsd, changedAfter, limit, offset, sort, view, ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdSegmentLeaders", () => {
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdSegmentLeaders(ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdSegmentLock", () => {
    const body: api.SegmentLockRequestBody = {
  "lock" : false,
  "sellAmount" : 1,
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdSegmentLock(body, name, {})).resolves.toBe(null)
  })
  test("nfdSendFromVault", () => {
    const body: api.SendFromVaultRequestBody = {
  "amount" : 1,
  "amountStr" : "abc123",
  "assets" : [ 1, 1 ],
  "note" : "aaa",
  "receiver" : "abc123",
  "receiverCanSign" : false,
  "receiverType" : "nfdVault",
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdSendFromVault(body, name, {})).resolves.toBe(null)
  })
  test("nfdSendToVault", () => {
    const body: api.SendToVaultRequestBody = {
  "amount" : 1,
  "amountStr" : "abc123",
  "assets" : [ 1, 1 ],
  "note" : "aaa",
  "optInOnly" : false,
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdSendToVault(body, name, {})).resolves.toBe(null)
  })
  test("nfdSetPrimaryAddress", () => {
    const body: api.SetPrimaryAddressRequestBody = {
  "address" : "333333333333333333333333333333333333333333333333333333333A",
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdSetPrimaryAddress(body, name, {})).resolves.toBe(null)
  })
  test("nfdSetPrimaryNFD", () => {
    const body: api.SetPrimaryAddressRequestBody = {
  "address" : "333333333333333333333333333333333333333333333333333333333A",
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdSetPrimaryNFD(body, name, {})).resolves.toBe(null)
  })
  test("nfdSuggest", () => {
    const buyer: string = "buyer_example"
    const name: string = "name_example"
    const limit: number = 789
    const view: string = "view_example"
    return expect(instance.nfdSuggest(buyer, name, limit, view, {})).resolves.toBe(null)
  })
  test("nfdTotals", () => {
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdTotals(ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdTwitterLeaders", () => {
    const ifNoneMatch: string = "ifNoneMatch_example"
    return expect(instance.nfdTwitterLeaders(ifNoneMatch, {})).resolves.toBe(null)
  })
  test("nfdUnlinkAddress", () => {
    const body: api.LinkAddressRequestBody = {
  "address" : [ "333333333333333333333333333333333333333333333333333333333A", "333333333333333333333333333333333333333333333333333333333A", "333333333333333333333333333333333333333333333333333333333A" ],
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdUnlinkAddress(body, name, {})).resolves.toBe(null)
  })
  test("nfdUpdateAll", () => {
    const body: api.UpdatePartialRequestBody = {
  "properties" : {
    "internal" : {
      "abc123" : "abc123"
    },
    "userDefined" : {
      "ca:b" : "abc123"
    },
    "verified" : {
      "caAlgo" : "abc123"
    }
  },
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdUpdateAll(body, name, {})).resolves.toBe(null)
  })
  test("nfdUpdateImage", () => {
    const name: string = "name_example"
    const sender: string = "sender_example"
    const which: string = "which_example"
    const wantTxn: boolean = true
    return expect(instance.nfdUpdateImage(name, sender, which, wantTxn, {})).resolves.toBe(null)
  })
  test("nfdUpdatePartial", () => {
    const body: api.UpdatePartialRequestBody = {
  "properties" : {
    "internal" : {
      "abc123" : "abc123"
    },
    "userDefined" : {
      "ca:b" : "abc123"
    },
    "verified" : {
      "caAlgo" : "abc123"
    }
  },
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdUpdatePartial(body, name, {})).resolves.toBe(null)
  })
  test("nfdVaultOptInLock", () => {
    const body: api.ContractLockRequestBody = {
  "lock" : false,
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    const name: string = "name_example"
    return expect(instance.nfdVaultOptInLock(body, name, {})).resolves.toBe(null)
  })
  test("nfdVerifyConfirm", () => {
    const body: api.VerifyConfirmRequestBody = {
  "challenge" : "abc123"
}
    const id: string = "id_example"
    return expect(instance.nfdVerifyConfirm(body, id, {})).resolves.toBe(null)
  })
  test("nfdVerifyRequest", () => {
    const body: api.VerifyRequestRequestBody = {
  "fieldToVerify" : "github",
  "name" : "aa",
  "sender" : "333333333333333333333333333333333333333333333333333333333A"
}
    return expect(instance.nfdVerifyRequest(body, {})).resolves.toBe(null)
  })
})

